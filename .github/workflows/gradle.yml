
name: Java CI with Gradle

on: workflow_dispatch
    
jobs:
   tests:
    name: I. Bild enviroment and testing
    runs-on: windows-latest

    steps:
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
        architecture: x64
        cache: gradle
#------------------------------------------------
   # - name: Install Docker Compose
    #  run: |
     #   choco install docker-compose -y
    #    if: runner.os == 'Windows'

   # - name: Start Selenoid
    #  run: |
     #   docker-compose up -d
     #   if: runner.os == 'Windows'
#------------------------------------------------     

    #- name: Set up Docker
    #  run: |
    #    choco install docker-desktop -y
    #    if: runner.os == 'Windows'

   # - name: Start Docker Service
    #  run: |
     #   Start-Service -Name Docker
      #  Set-Service -Name Docker -StartupType 'Automatic'
       # if: runner.os == 'Windows'

   # - name: Wait for Docker to start
    #  run: |
     #   Start-Sleep 15
      #  if: runner.os == 'Windows'

    #- name: Start Selenoid
     # run: |
      #  docker run -d --name selenoid 
       #     -p 4444:4444 
        #    -v /var/run/docker.sock:/var/run/docker.sock
         #   -v $GITHUB_WORKSPACE/browsers.json:/etc/selenoid/browsers.json  
          #  aerokube/selenoid:latest-release
       # if: runner.os == 'Windows'
#------------------------------------------------------------------------
      
    #- name: Make gradlew executable
    #  run: chmod +x ./gradlew  
    
    - name: Run tests with Gradle
      run: ./gradlew test -Dbrowser=chrome --info

#--------------------------------------------------------------------
   # - name: Stop Selenoid
    #  run: |
     #   docker stop selenoid
      #  if: runner.os == 'Windows'
      
   # - name: Stop Selenoid
    #  run: |
     #   docker-compose down
      #  if: runner.os == 'Windows'
#-------------------------------------------------------------------- 
      
    - name: Upload artifact "allure-results"
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: allure-results
        path: build/allure-results/
        retention-days: 10

  
   generate_report:
      name: II. Generate & Deploy Allure report
      runs-on: ubuntu-latest
      if: always()
      needs: [ tests ]
      steps:
        - name: 1. Get Allure history
          uses: actions/checkout@v3
          if: always()
          continue-on-error: true
          with:
           ref: gh-pages
           path: gh-pages
           
        - name: 2. Download Artifacts
          uses: actions/download-artifact@v3
          id: download
          with:
            name: allure-results
            path: allure-results
       
        - name: 3. Test marketplace action
          uses: simple-elf/allure-report-action@master
          if: always()
          id: allure-report
          with:
            allure_results: allure-results
            allure_history: allure-history
            allure_report: allure-report
            gh_pages: gh-pages
            #ref: gh-pages
            #path: gh-pages
            keep_reports: 30
         
        - name: 4. Deploy report to Github Pages
          if: always()
          uses: peaceiris/actions-gh-pages@v2
          env:
           PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           PUBLISH_BRANCH: gh-pages
           PUBLISH_DIR: ./allure-history 
           commit_message: ${{ github.event.head_commit.message }}
           
        - name: 5. Archive code coverage results
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: allure_report
            path: allure_report
      
        
      
